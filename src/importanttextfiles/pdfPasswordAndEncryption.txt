import { PDFViewer } from '@react-pdf/renderer'
import './App.css'
import Hash from './pages/cryptography/Cryptography'
import CryptographyExample from './pages/cryptography/CryptographyExample'
// import State from './hooks/changestate/State'
// import SpreadOperator from './hooks/spreadoperator/SpreadOperator'
// import ChangeName from './hooks/ChangeName'
// import Hooks from './hooks/Hooks'
// import Toggle from './hooks/Toggle'
// import ChangeCount from './hooks/changecount/ChangeCount'
// import HooksArray from './hooks/useStateArray/HooksArray'
// import Crud from './pages/Crud'
// import BishalEffects from './pages/bishaleffects/BishalEffects'
// import Bishal from './pages/filter&map/FilterMap'


// import Game from './pages/game/Game'
// import RandomNumberGame from './pages/game/RandomNumberGame'
// import LocalStorage from './pages/localstorage/LocalStorage'
// import Login from './pages/login/Login'
// import LoginNew from './pages/login/LoginNew'
// import SimpleTable from './pages/mui/SimpleTable'
import CartBag from './pages/usereducer/CartBag'
// import PasswordForm from './password/PasswordForm'
import TimeImage from './timeimage/TimeImage'
import MyDocument from './mydocument/myDocument'
import { Box, TextField } from '@mui/material'
import { green, grey, red } from '@mui/material/colors'
import { useState } from 'react'
import generatePdf from './mydocument/myDocument'


function App() {
  const [isPdfLoaded, setPdfLoaded] = useState(false);
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLoadSuccess = async () => {
    // Check if the password is correct
    const isPasswordCorrect = await checkPassword();

    if (!isPasswordCorrect) {
      setError('Incorrect password. Please try again.');
    } else {
      setPdfLoaded(true);
      setError('');
    }
  };

  const checkPassword = async () => {
    try {
      // Perform your password validation logic here
      // For simplicity, assuming a static password "123456"
      return password === '123456';
    } catch (error) {
      console.error('Error checking password:', error);
      return false;
    }
  };

  const encryptAndLoadPdf = async () => {
    try {
      // Load the PDFDocument from the existing MyDocument
      const existingPdfBytes = await MyDocument.render();
      const pdfDoc = await PDFDocument.load(existingPdfBytes);

      // Encrypt the PDF with a password
      await pdfDoc.encrypt({ password });

      // Save the encrypted PDF as bytes
      const encryptedPdfBytes = await pdfDoc.save();

      // Load the encrypted PDF into the PDFViewer
      setPdfLoaded(false);
      await MyDocument.render({ pdfBytes: encryptedPdfBytes });
      setPdfLoaded(true);
    } catch (error) {
      console.error('Error encrypting PDF:', error);
      setError('Error encrypting PDF. Please try again.');
    }
  };
 
  return (
     <>
        {/* <Hooks /> */}
        <TimeImage />
        {/* <ChangeName />
        <ChangeCount />
        <Toggle />
        <PasswordForm /> */}
        {/* <HooksArray /> */}
        {/* <SpreadOperator /> */}
        {/* <Bishal />
        <BishalEffects /> */}
        {/* <Crud /> */}
        {/* <Login /> */}
        {/* <LoginNew /> */}
        {/* import two state confirm that these both works separately */}
        {/* <State /> */}
        <img src='https://www.google.com/logos/doodles/2023/new-years-eve-2023-6753651837109995-ladc.gif' alt='googleAnimation'/>
        {/* <State name="Google"
               company="Apple"
               Brand= "Iphone"
               price= {20}
         /> */}
         {/* <LocalStorage /> */}
         {/* <Game /> */}
         {/* <SimpleTable /> */}
         {/* <RandomNumberGame /> */}
         {/* <Hash /> */}
         {/* <CryptographyExample /> */}
         <Box sx={{
        background: `linear-gradient(90deg, ${green[500]}, ${red[500]}, ${grey[300]})`,
        p: 2,
        m: 2,
        border: 1,
        borderRadius: 8,
      }}>
        <h1>My PDF Demo</h1>

        {isPdfLoaded ? (
          <PDFViewer
            onLoadSuccess={handleLoadSuccess}
          >
            <MyDocument />
            {generatePdf()} </PDFViewer>
        ) : (
          <>
            <TextField
              label="Enter Password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              variant="outlined"
              margin="normal"
            />
            <button
              variant="contained"
              color="primary"
              onClick={encryptAndLoadPdf}
            >
              Unlock PDF
            </button>
            {error && <p style={{ color: 'red' }}>{error}</p>}
          </>
        )}
      </Box>
         </>
  )
}
export default App












// mydocument/myDocument.jsx

import React from "react";
import { Document, Page, Text, View, StyleSheet } from "@react-pdf/renderer";

const styles = StyleSheet.create({
  page: {
    paddingTop: 30,
    paddingBottom: 60,
    paddingHorizontal: 30,
  },
  section: {
    marginBottom: 30,
  },
  header: {
    fontSize: 24,
    marginBottom: 10,
  },
  paragraph: {
    fontFamily: "Helvetica",
  },
});

const generatePdf = () => {
  // Creating a PDF document
  const pdfDoc = (
    <Document>
      <Page style={styles.page}>
        <View style={styles.section}>
          <Text style={styles.header}>My Custom PDF Document</Text>
          <Text style={styles.paragraph}>
            This is the content of my PDF document. You can include multiple
            paragraphs, images, tables, and other elements using the available
            components from React PDF. Portable Document Format (PDF) has become
            a ubiquitous and versatile file format in the digital landscape.
            Created by Adobe, PDF is widely used for presenting documents in a
            consistent manner across different platforms. It preserves the
            formatting, fonts, and images of a document, ensuring that it looks
            the same regardless of the device or software used to view it. PDFs
            are commonly utilized for business reports, academic papers, legal
            documents, and various forms of digital communication. One of the key
            advantages of PDF is its ability to be easily shared and accessed
            while maintaining document integrity. PDFs can include interactive
            elements, hyperlinks, and multimedia, making them suitable for a wide
            range of purposes. Additionally, the security features in PDFs, such
            as password protection and encryption, contribute to their
            popularity in handling sensitive information. As technology continues
            to evolve, the PDF format remains an essential tool for efficient and
            reliable document exchange in both professional and personal
            spheres.
          </Text>
        </View>
      </Page>
    </Document>
  );

  // Render the PDF as bytes
  return pdfDoc.render();
};

export default generatePdf;
